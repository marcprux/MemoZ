name: MemoZ CI


on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - '*'
  schedule:
    # run at 6AM & 6PM UTC
    - cron:  '0 6,18 * * *'

jobs:
  Linux:
    runs-on: ubuntu-latest
    needs: [Android]
    steps:
      - uses: actions/checkout@v2
      - name: Test (Debug)
        run: swift test -v --configuration debug
      - name: Test (Release)
        run: swift test -v --configuration release -Xswiftc -enable-testing

  watchOS:
    runs-on: macos-11
    needs: [Linux] # Linux must pass first
    steps:
      - uses: actions/checkout@v2

      - run: |
            xcodebuild clean test \
              -configuration Release \
              -scheme "MemoZ" \
              -sdk "watchsimulator" \
              -destination "platform=watchOS Simulator,name=Apple Watch Series 6 - 44mm" \
              ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO

  iOS:
    runs-on: macos-latest
    needs: [watchOS] 
    steps:
      - uses: actions/checkout@v2
      - run: |
            xcodebuild clean test \
              -configuration Release \
              -scheme "MemoZ" \
              -sdk "iphonesimulator" \
              -destination "platform=iOS Simulator,name=iPhone 14" \
              ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO

  tvOS:
    runs-on: macos-latest
    needs: [iOS] # iOS must pass first
    steps:
      - uses: actions/checkout@v2
      - run: |
            xcodebuild clean test \
              -configuration Release \
              -scheme "MemoZ" \
              -sdk "appletvsimulator" \
              -destination "platform=tvOS Simulator,name=Apple TV" \
              ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO

  macOS10:
    runs-on: macos-10.15
    needs: [Linux] # Linux must pass first
    steps:
      - uses: actions/checkout@v2
      - name: Test (Debug)
        run: swift test -v --configuration debug
      - name: Test (Release)
        run: swift test -v --configuration release -Xswiftc -enable-testing

  macOS11:
    runs-on: macos-11
    needs: [macOS10] # macOS10 must pass first
    steps:
      - uses: actions/checkout@v2
      - name: Test (Debug)
        run: swift test -v --configuration debug
      - name: Test (Release)
        run: swift test -v --configuration release -Xswiftc -enable-testing

  macOS12:
    runs-on: macos-12
    needs: [macOS11] # macOS11 must pass first
    steps:
      - uses: actions/checkout@v2
      - name: Test (Debug)
        run: swift test -v --configuration debug
      - name: Test (Release)
        run: swift test -v --configuration release -Xswiftc -enable-testing

  Android:
    runs-on: ubuntu-22.04
    #needs: [Linux]
    steps:
      # Running tests on macOS would be much faster
      # due to HAXM support the GitHub runners; no acceleration on Linux
      # https://github.com/ReactiveCircus/android-emulator-runner/issues/46
      # but since out Swift-Android toolchain only works on linux so far,
      # it is easier to run the tests on a single platform rather than
      # perform a complex handoff of the artifacts from the ubuntu build
      # host and the macOS Android test runner.
      - name: Test Android Emulator
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 24
          arch: x86_64
          script: |
            ls -la
            uname -a
            adb install pack/termux-debug.apk
            chmod 755 pack/{generate-manual,math,repeat,roll,*.xctest}
            adb push pack /data/local/tmp
            adb shell /data/local/tmp/pack/swift-argument-parserPackageTests.xctest
            adb shell /data/local/tmp/pack/swift-cryptoPackageTests.xctest
            adb shell "run-as com.termux mkdir /data/data/com.termux/pack"
            adb shell "run-as com.termux cp /data/local/tmp/pack/swift-nioPackageTests.xctest /data/data/com.termux/pack"
            adb shell "run-as com.termux cp -r /data/local/tmp/pack/lib /data/data/com.termux/pack"
            adb shell "run-as com.termux /data/data/com.termux/pack/swift-nioPackageTests.xctest"
            adb shell /data/local/tmp/pack/swift-algorithmsPackageTests.xctest

      - uses: actions/checkout@v2
      - name: Setup Android Toolchain
        run: |
          TOOLCHAIN_URL="https://github.com/buttaface/swift-android-sdk/releases/download/5.7/swift-5.7-android-aarch64-24-sdk.tar.xz"
          NDK_URL="https://dl.google.com/android/repository/android-ndk-r25b-linux.zip"
          SWIFT_URL="https://download.swift.org/swift-5.7-release/ubuntu2204/swift-5.7-RELEASE/swift-5.7-RELEASE-ubuntu22.04.tar.gz"
          SIG="${SWIFT_URL}.sig"

          SWIFT_BASENAME=$(basename "${SWIFT_URL}")
          SIGNAME=$(basename "${SIG}")
          SWIFT_DIR=$(basename "${SWIFT_BASENAME}" ".tar.gz")

          test -f "${SWIFT_BASENAME}" || curl -fsSL -O "${SWIFT_URL}"
          test -f "${SIGNAME}" || curl -fsSL -O "${SIG}"

          curl -fsSL https://swift.org/keys/all-keys.asc | gpg --import -
          gpg --lsign-key "A62A E125 BBBF BB96 A6E0  42EC 925C C1CC ED3D 1561" || true

          test -d "${SWIFT_DIR}" || gpg --verify $(basename ${SIG})

          test -d "${SWIFT_DIR}" || tar xzf "${SWIFT_BASENAME}"

          SWIFT_PATH="${PWD}/${SWIFT_DIR}"

          #ls "${SWIFT_PATH}"
          ${SWIFT_PATH}/usr/bin/swift --version

          export PATH="${SWIFT_PATH}/usr/bin:${PATH}"
          swift --version

          TOOLCHAIN_BASENAME=$(basename "${TOOLCHAIN_URL}")
          TOOLCHAIN_DIR=$(basename "${TOOLCHAIN_BASENAME}" ".tar.xz")
          test -f "${TOOLCHAIN_BASENAME}" || curl -O -fsSL "${TOOLCHAIN_URL}"
          test -d "${TOOLCHAIN_DIR}" || tar xf "${TOOLCHAIN_BASENAME}"

          NDK_BASENAME=$(basename "${NDK_URL}")
          NDK_DIR=$(basename "${NDK_BASENAME}" "-linux.zip")
          test -f "${NDK_BASENAME}" || curl -O -fsSL "${NDK_URL}"
          test -d "${NDK_DIR}" || unzip -q "${NDK_BASENAME}"

          ln -sf ../../../../swift-5.7-RELEASE-ubuntu22.04/usr/lib/clang/13.0.0 swift-5.7-android-aarch64-24-sdk/usr/lib/swift/clang

          echo '{ "version": 1, "target": "aarch64-unknown-linux-android24", "toolchain-bin-dir": "'${PWD}'/swift-5.7-RELEASE-ubuntu20.04/usr/bin", "sdk": "'${PWD}'/android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/sysroot", "extra-cc-flags": [ "-fPIC" ], "extra-swiftc-flags": [ "-resource-dir", "'${PWD}'/swift-5.7-android-aarch64-24-sdk/usr/lib/swift", "-tools-directory", "'${PWD}'/android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin" ], "extra-cpp-flags": [ "-lstdc++" ] }' > android-aarch64.json

          #cat android-aarch64.json
          cat android-aarch64.json | jq .

      - name: Build Android (Debug)
        run: |
          SWIFT="${PWD}/swift-5.7-RELEASE-ubuntu22.04/usr/bin/swift"

          "${SWIFT}" build --configuration debug --build-tests --enable-test-discovery --destination android-aarch64.json -Xlinker -rpath -Xlinker \$ORIGIN/swift-5.7-android-aarch64-24-sdk/usr/lib/swift/android

          file .build/debug/*/*.o

          # testing currently requires macOS; see: https://github.com/buttaface/swift-android-sdk/blob/5.7/README.md#swift-cross-compilation-sdks-for-android

      - name: Build Android (Release)
        run: |
          SWIFT="${PWD}/swift-5.7-RELEASE-ubuntu22.04/usr/bin/swift"

          "${SWIFT}" build --configuration release --build-tests --enable-test-discovery --destination android-aarch64.json -Xlinker -rpath -Xlinker \$ORIGIN/swift-5.7-android-aarch64-24-sdk/usr/lib/swift/android

          file .build/release/*/*.o

      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin
          cache: gradle

      - name: Upload emulator tests artifact
        uses: actions/upload-artifact@v1
        with:
          name: emulator_tests
          path: ./lib/build/outputs/code_coverage/debugAndroidTest/connected

  Release:
    runs-on: ubuntu-latest
    needs: [Linux, macOS12, iOS, tvOS, watchOS, Android]

    steps:
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            CHANGELOG.md
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

